[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "camel-ai"
version = "0.2.9"
authors = ["CAMEL-AI.org"]
description = "Communicative Agents for AI Society Study"
readme = "README.md"
keywords = [
    "communicative-ai",
    "ai-societies",
    "artificial-intelligence",
    "deep-learning",
    "multi-agent-systems",
    "cooperative-ai",
    "natural-language-processing",
    "large-language-models",
]
packages = [
    { include = "camel" },
]
license = "Apache License 2.0"
homepage = "https://www.camel-ai.org/"
repository = "https://github.com/camel-ai/camel"
documentation = "https://docs.camel-ai.org"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
numpy = "^1"
openai = "^1.45.0"
tiktoken = "^0.7.0"
colorama = "^0"
jsonschema = "^4"
protobuf = "^4"
pathlib = "^1.0.1"
docstring-parser = "^0.15"
pydantic = ">=1.9,<2.10"
eval-type-backport = "0.2.0"
curl_cffi = "0.6.2"
pandoc = "*"
pillow = "^10.2.0"

# model-platforms
litellm = { version = "^1.38.1", optional = true }
google-generativeai = { version = "^0.6.0", optional = true }
mistralai = { version = "^1.1.0", optional = true }
reka-api = { version = "^3.0.8", optional = true }
anthropic = { version = "^0.29.0", optional = true }
cohere = { version = "^5.11.0", optional = true }


# huggingface-agent
transformers = { version = "^4", optional = true }
diffusers = { version = "^0", optional = true }
accelerate = { version = "^0", optional = true }
datasets = { version = "^2", optional = true }
torch = [
    { version = "^2", optional = true, markers = "platform_system != 'Darwin' or platform_machine == 'arm64'" },
    # Torch 2.1.0 is used on non-arm64 macOS systems.
    { version = "2.1.0", optional = true, markers = "platform_system == 'Darwin' and platform_machine != 'arm64'" }
]
soundfile = { version = "^0", optional = true }
sentencepiece = { version = "^0", optional = true }
opencv-python = { version = "^4", optional = true }

# tools
beautifulsoup4 = { version = "^4", optional = true }
docx2txt = { version = "^0.8", optional = true }
PyMuPDF = { version = "^1.22.5", optional = true }
wikipedia = { version = "^1", optional = true }
duckduckgo-search = { version = "^6.2.12", optional = true }
newspaper3k = { version = "^0.2.8", optional = true }
wolframalpha = { version = "^5.0.0", optional = true }
pyowm = { version = "^3.3.0", optional = true }
googlemaps = { version = "^4.10.0", optional = true }
requests_oauthlib = { version = "^1.3.1", optional = true }
prance = { version = "^23.6.21.0", optional = true }
openapi-spec-validator = { version = "^0.7.1", optional = true }
unstructured = { extras = ["all-docs"], version = "^0.14", optional = true }
firecrawl-py = { version = "^1.0.0", optional = true }
slack-sdk = { version = "^3.27.2", optional = true }
slack-bolt = { version = "^1.20.1", optional = true }
pydub = { version = "^0.25.1", optional = true }
pygithub = { version = "^2.3.0", optional = true }
imageio = { extras = ["pyav"], version = "^2.34.2" }
pyTelegramBotAPI = { version = "^4.18.0", optional = true }
"discord.py" = { version = "^2.3.2", optional = true }
docker = { version = "^7.1.0", optional = true }
agentops = { version = "^0.3.6", optional = true }
azure-storage-blob = { version = "^12.21.0", optional = true }
google-cloud-storage = { version = "^2.18.0", optional = true }
botocore = { version = "^1.35.3", optional = true }
nltk = { version = "3.8.1", optional = true }
asknews = { version = "^0.7.43", optional = true }
praw = { version = "^7.7.1", optional = true }
textblob = { version = "^0.18.0.post0", optional = true }
datacommons = { version = "^1.4.3", optional = true }
datacommons_pandas = { version = "^0.0.3", optional = true }
tavily-python = { version = "^0.5.0", optional = true }
scholarly = { extras = ["tor"], version = "1.7.11", optional = true }
arxiv = { version = "^2.1.3", optional = true }
arxiv2text = { version = "^0.1.14", optional = true }
jupyter_client = { version = "^8.6.2", optional = true }
ipykernel = { version = "^6.0.0", optional = true }
pdfplumber = { version = "^0.11.0", optional = true }
apify_client = { version = "^1.8.1", optional = true }
notion-client = { version = "^2.2.1", optional = true }
yt-dlp = { version = "^2024.11.4", optional = true }
ffmpeg-python = { version = "^0.2.0", optional = true }


# encoders
sentence-transformers = { version = "^3.0.1", optional = true }

# vector-databases
qdrant-client = { version = "^1.9.0", optional = true }
pymilvus = { version = "^2.4.0", optional = true }

# graph-storages
neo4j = { version = "^5.18.0", optional = true }
nebula3-python = { version = "3.8.2", optional = true }

# key-value-storages
redis = { version = "^5.0.6", optional = true }

# retrievers
rank-bm25 = { version = "^0.2.2", optional = true }

# test
pytest = { version = "^7", optional = true }
pytest-asyncio = { version = "^0.23.0", optional = true }
mock = { version = "^5", optional = true}

[tool.poetry.extras]
test = ["pytest", "mock", "pytest-asyncio"]

rag = [
    "sentence-transformers",
    "qdrant-client",
    "pymilvus",
    "neo4j",
    "nebula3-python",
    "rank-bm25",
    "cohere",
    "unstructured",
]

search_tools = [
    "duckduckgo-search",
    "wikipedia",
    "wolframalpha",
    "tavily-python",
]

model-platforms = [
    "litellm",
    "google-generativeai",
    "mistralai",
    "reka-api",
    "anthropic",
    "cohere",
]

huggingface-agent = [
    "transformers",
    "diffusers",
    "accelerate",
    "datasets",
    "torch",
    "soundfile",
    "sentencepiece",
    "opencv-python",
]

encoders = [
    "sentence-transformers",
]

tools = [
    "beautifulsoup4",
    "docx2txt",
    "functools",
    "PyMuPDF",
    "wikipedia",
    "duckduckgo-search",
    "newspaper3k",
    "wolframalpha",
    "pyowm",
    "googlemaps",
    "requests_oauthlib",
    "prance",
    "openapi-spec-validator",
    "unstructured",
    "firecrawl-py",
    "arxiv",
    "arxiv2text",
    "nltk",
    "imageio",
    "pillow",
    "slack-sdk",
    "slack-bolt",
    "pydub",
    "pygithub",
    "pyTelegramBotAPI",
    "discord.py",
    "docker",
    "jupyter_client",
    "ipykernel",
    "agentops",
    "asknews",
    "praw",
    "textblob",
    "datacommons",
    "datacommons_pandas",
    "scholarly",
    "pdfplumber",
    "apify_client",
    "notion-client",
    "yt-dlp",
    "ffmpeg-python",
]

vector-databases = [
    "qdrant-client",
    "pymilvus",
]

graph-storages = [
    "neo4j",
    "nebula3-python",
]

kv-stroages = [
    "redis",
]

object-storages = [
    "azure-storage-blob",
    "google-cloud-storage",
    "botocore",
]

retrievers = [
    "rank-bm25",
    "cohere",
]

runtime = [
    "docker",
    "fastapi",
    "uvicorn",
]

all = [
    # huggingface-agent
    "transformers",
    "diffusers",
    "accelerate",
    "datasets",
    "torch",
    "soundfile",
    "sentencepiece",
    "opencv-python",
    # tools
    "beautifulsoup4",
    "docx2txt",
    "pygithub",
    "pyTelegramBotAPI",
    "discord.py",
    "PyMuPDF",
    "wikipedia",
    "duckduckgo-search",
    "newspaper3k",
    "wolframalpha",
    "pyowm",
    "googlemaps",
    "requests_oauthlib",
    "prance",
    "openapi-spec-validator",
    "unstructured",
    "nltk",
    "firecrawl-py",
    "arxiv",
    "arxiv2text",
    "imageio",
    "slack-sdk",
    "slack-bolt",
    "pydub",
    "pillow",
    "docker",
    "jupyter_client",
    "ipykernel",
    "agentops",
    "praw",
    "textblob",
    "asknews",
    "scholarly",
    "pdfplumber",
    "notion-client",
    "yt-dlp",
    "ffmpeg-python",
    # vector-database
    "qdrant-client",
    "pymilvus",
    # retrievers
    "cohere",
    # encoders
    "sentence-transformers",
    # graph-storages
    "neo4j",
    "nebula3-python",
    # retrievers
    "rank-bm25",
    # model platforms
    "litellm",
    "mistralai",
    "cohere",
    "google-generativeai",
    "anthropic",
    "reka-api",
    # kv-storages
    "redis",
    # object-storages
    "azure-storage-blob",
    "google-cloud-storage",
    "botocore",
    "datacommons",
    "datacommons_pandas",
    "tavily-python",
    "apify_client",
    "fastapi",
    "uvicorn",
]

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
ruff = "^0.4.1"
mypy = "^1.5.1"
toml = ">=0.10.2"
pre-commit = "^3"
pytest = "^7"
pytest-cov = "^4"
pytest-asyncio = "^0.23.0"
gradio = "^3"
mock = "^5"

# types
types-Pillow = "*"
types-Pygments = "*"
types-mock = "*"
types-regex = "*"
types-setuptools = "*"
types-tqdm = "*"
types-colorama = "^0"
types-requests = "^2"

[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
sphinx = "^7"
sphinx_book_theme = "*"
docutils = "<0.20.0"
myst-parser = "*"
nbsphinx = "*"

[tool.ruff]
line-length = 79
fix = true
target-version = "py39"

[tool.ruff.format]
quote-style = "preserve"

[tool.ruff.lint]
extend-select = [
    "I", # isort
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "PGH", # pygrep-hooks
    "RUF", # ruff
    "E",
]

ignore = [
    "B028", # Warning without stacklevel
    "B904", # use 'raise ... from err'
    "B905", # use explicit 'strict=' parameter with 'zip()'
    "N818", #  Exception name should be named with an Error suffix
    "C416", # I think comprehension is more clear https://docs.astral.sh/ruff/rules/unnecessary-comprehension/
    "C408", # we have used lots of dict(...) instead of literal
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["camel"]

[tool.pytest.ini_options]
pythonpath = ["."]
addopts = ["--strict-markers"]
markers = [
    "asyncio: mark a test as asyncio-based.",
    "very_slow: mark a very slow test to run only in full test mode",
    "model_backend: for tests that require OpenAI API key or a local LLM",
]

[tool.coverage.report]
include_namespace_packages = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "packaging.*",
    "tiktoken",
    "openai",
    "openai.error",
    "anthropic",
    "pytest",
    "_pytest.config",
    "_pytest.nodes",
    "numpy",
    "torch",
    "sqlalchemy",
    "google.cloud.sql.connector",
    "gradio",
    "database_connection",
    "huggingface_hub",
    "huggingface_hub.utils._errors",
    "wikipedia",
    "duckduckgo_search",
    "newspaper",
    "wolframalpha",
    "pyowm",
    "googlemaps",
    "requests_oauthlib",
    "prance",
    "openapi-spec-validator",
    "jsonschema.*",
    "bs4.*",
    "docx2txt",
    "PyMuPDF",
    "fitz",
    "qdrant_client.*",
    "unstructured.*",
    "nltk",
    "firecrawl",
    "imageio",
    "rank_bm25",
    "cohere",
    "sentence_transformers.*",
    "pymilvus",
    "pillow",
    "slack-sdk",
    "slack-bolt",
    "pydub",
    "pygithub",
    "litellm",
    "pyTelegramBotAPI",
    "discord.py",
    "docker.*",
    "google.*",
    "google_generativeai",
    "mistralai",
    "cohere",
    "reka-api",
    "agentops",
    "botocore.*",
    "asknews",
    "arxiv",
    "arxiv2text",
    "praw",
    "textblob",
    "datacommons",
    "datacommons_pandas",
    "tavily-python",
    "scholarly",
    "notion-client",
    "ffmpeg",
    "yt_dlp",
]
ignore_missing_imports = true
